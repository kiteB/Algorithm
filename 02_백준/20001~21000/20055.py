# 컨베이어 벨트 위의 로봇
# 컨베이어 벨트를 이용해 로봇들을 건너편으로 옮기려고 한다. 로봇을 옮기는 과정에서는 아래와 같은 일이 순서대로 일어난다.
# 1. 벨트가 각 칸 위에 있는 로봇과 함께 한 칸 회전한다.
# 2. 가장 먼저 벨트에 올라간 로봇부터, 벨트가 회전하는 방향으로 한 칸 이동할 수 있다면 이동한다. 만약 이동할 수 없다면 가만히 있는다.
#     1) 로봇이 이동하기 위해서는 이동하려는 칸에 로봇이 없으며, 그 칸의 내구도가 1 이상 남아 있어야 한다.
# 3. 올리는 위치에 있는 칸의 내구도가 0이 아니면 올리는 위치에 로봇을 올린다.
# 4. 내구도가 0인 칸의 개수가 K개 이상이라면 과정을 종료한다. 그렇지 않다면 1번으로 돌아간다.
# 종료되었을 때 몇 번째 단계가 진행 중이었는지 구해보자. 가장 처음 수행되는 단계는 1번째 단계이다.
# 입력: 첫째 줄에 N, K가 주어진다. 둘째 줄에는 A1, A2, ..., A2N이 주어진다.
# 출력: 몇 번째 단계가 진행 중일때 종료되었는지 출력한다.
import sys
from collections import deque

n, k = map(int, sys.stdin.readline().split())
a = deque(list(map(int, sys.stdin.readline().split())))     # 내구도 저장
robot = deque([0] * n)                                      # 로봇 상태

step = 0
while True:
    step += 1

    # 1. 벨트 & 로봇 회전
    a.rotate(1)
    robot.rotate(1)

    # '내리는 위치 (N번 칸)'에 로봇이 있으면 내리기
    if robot[n-1]:
        robot[n-1] = 0

    # 2. 가장 먼저 올라간 로봇부터 움직일 수 있으면 이동
    for i in range(n-2, -1, -1):
        # 현재 위치에 로봇이 있는 경우
        if robot[i]:
            # 2-1) 이동하려는 다음 칸에 로봇이 없고, 그 칸의 내구도가 1 이상이라면 이동
            if robot[i+1] == 0 and a[i+1]:
                a[i+1] -= 1                     # 내구도 -1
                robot[i+1] = 1                  # 로봇 이동
                robot[i] = 0                    # robot[원래 있던 위치]는 0으로 바꿔주기

    # '내리는 위치 (N번 칸)'에 로봇이 있으면 내리기
    if robot[n-1]:
        robot[n-1] = 0

    # 3. '올리는 위치 (1번 칸)'에 있는 칸의 내구도가 0이 아니라면 로봇 올리기
    if a[0] and robot[0] == 0:
        a[0] -= 1
        robot[0] = 1

    # 4. 내구도가 0인 칸의 개수가 K개 이상이라면 과정 종료
    if a.count(0) >= k:
        print(step)
        break